{- TDA arboles binarios con valores en las hojas -}data ArbolB = HojaB Int | NodoB ArbolB ArbolB     deriving ShowejArbolB :: ArbolBejArbolB = NodoB (NodoB (HojaB 1) (HojaB 4)) (NodoB (HojaB 6)(HojaB 9)){- Numero de hojas 8.4.1 -}nHojas :: ArbolB -> IntnHojas (HojaB _) = 1nHojas (NodoB a1 a2) = nHojas a1 + nHojas a2--8.4.2 Caracter balanceado de un arbolbalanceado :: ArbolB -> Boolbalanceado (HojaB _) = Truebalanceado (NodoB a1 a2) = abs (nHojas a1 - nHojas a2) <= 1     && balanceado a1     && balanceado a2{- 8.4.3. Arbol balanceado correspondiente a una lista -}mitades :: [a] -> ([a],[a])mitades xs = splitAt (length xs `div` 2) xs{- Ej 8.4.4 Arbol Balanceado -}arbolBalanceado :: [Int] -> ArbolBarbolBalanceado [x] = HojaB xarbolBalanceado xs  = NodoB (arbolBalanceado ys) (arbolBalanceado zs)                      where (ys,zs) = mitades xs